// ==UserScript==
// @name                7zap Killer Reveal Enhanced
// @version             2.1
// @namespace           https://github.com/oumuamuax/7zap-reveal-img-and-codes
// @description         Reveals the part numbers on the 7zap rip of ETKA, removes image blur, and eliminates premium restriction messages.
// @license             MIT
// @match               https://*.7zap.com/*
// @grant               none
// @run-at              document-end
// @downloadURL https://update.greasyfork.org/scripts/484110/7zap%20Reveal.user.js
// @updateURL https://update.greasyfork.org/scripts/484110/7zap%20Reveal.meta.js
// ==/UserScript==

console.log('7zap Script: Iniciando versión optimizada...');

// TU SCRIPT ORIGINAL SIN TOCAR
var part_table = document.getElementsByClassName("copyPartNumberWrap");

for(var i = 0; i < part_table.length; i++) {
  replace_hidden_pn(part_table[i]);

  // Replace the search button action with a Google search
  part_table[i].children[1].setAttribute("href", "https://www.google.com/search?q=" + get_pn(part_table[i]).replaceAll(" ", "+"));

  // Replace the clipboard button action
  part_table[i].children[0].setAttribute("onclick", "navigator.clipboard.writeText(\"" + get_pn(part_table[i]) + "\")");
}

// Extract part number from copy button
function get_pn(e) {
  var idx_s = e.innerHTML.indexOf("('") + 2;
  var idx_e = e.innerHTML.indexOf("')", idx_s);
  var ret = e.innerHTML.substr(idx_s, idx_e - idx_s).replaceAll("&nbsp;","");
  return ret;
}

function replace_hidden_pn(e) {
  var ret = "";

var idx_s = e.innerHTML.indexOf("</i>") + 4;
  var idx_e = e.innerHTML.indexOf("&nbsp", idx_s);

  ret += e.innerHTML.substr(0, idx_s);
  ret += get_pn(e);
  ret += e.innerHTML.substr(idx_e);

  e.innerHTML = ret;
}

console.log('7zap Script: Funcionalidad original aplicada');

// VERSIÓN OPTIMIZADA DE LAS MEJORAS
(function() {
    'use strict';
    
    // Cache para evitar procesamiento duplicado
    var processedImages = new Set();
    var isProcessing = false;
    
    // Función optimizada para detectar y procesar imágenes con blur
    function processBlurredImages() {
        if (isProcessing) return;
        isProcessing = true;
        
        try {
            var blurredImages = document.querySelectorAll('img');
            var newImagesFound = 0;
            
            for(var j = 0; j < blurredImages.length; j++) {
                var img = blurredImages[j];
                var imgId = img.src + '_' + j; // ID único basado en src y posición
                
                if (processedImages.has(imgId)) continue;
                
                var computedStyle = window.getComputedStyle(img);
                var filter = computedStyle.filter || computedStyle.webkitFilter || '';
                
                if (filter.includes('blur')) {
                    createCleanImageOverlay(img);
                    processedImages.add(imgId);
                    newImagesFound++;
                }
            }
            
            if (newImagesFound > 0) {
                console.log('7zap Script: Procesadas', newImagesFound, 'nuevas imágenes con blur');
            }
        } catch (e) {
            console.error('7zap Script: Error procesando imágenes:', e);
        } finally {
            isProcessing = false;
        }
    }
    
    // Función para crear overlay de imagen limpia
    function createCleanImageOverlay(img) {
        if (!img.parentElement) return;
        
        var cleanImg = img.cloneNode(true);
        cleanImg.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            pointer-events: none;
            z-index: 10;
            filter: none !important;
            -webkit-filter: none !important;
        `;
        
        // Hacer el contenedor padre relativo
        var parentStyle = window.getComputedStyle(img.parentElement);
        if (parentStyle.position === 'static') {
            img.parentElement.style.position = 'relative';
        }
        
        img.parentElement.appendChild(cleanImg);
    }
    
    // Función optimizada para ocultar elementos premium
    function hidePremiumElements() {
        // Selectores más específicos y eficientes
        var selectors = [
            '.alert-scheme',
            '[class*="premium"]',
            '[class*="tariff"]'
        ];
        
        selectors.forEach(function(selector) {
            var elements = document.querySelectorAll(selector);
            for(var i = 0; i < elements.length; i++) {
                if (!elements[i].dataset.hidden) {
                    elements[i].style.cssText = 'transform: translateX(-9999px) !important; position: absolute !important;';
                    elements[i].dataset.hidden = 'true';
                }
            }
        });
        
        // Buscar texto de restricción de forma más eficiente
        var restrictionTexts = [
            'Users without a premium tariff can view no more than',
            'schemes per day'
        ];
        
        var walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_TEXT,
            {
                acceptNode: function(node) {
                    return restrictionTexts.some(text => 
                        node.nodeValue && node.nodeValue.includes(text)
                    ) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
                }
            },
            false
        );
        
        var textNode;
        while (textNode = walker.nextNode()) {
            var element = textNode.parentElement;
            if (element && !element.dataset.hidden) {
                element.style.cssText = 'transform: translateX(-9999px) !important; position: absolute !important;';
                element.dataset.hidden = 'true';
            }
        }
    }
    
    // Interceptor optimizado para getComputedStyle
    var originalGetComputedStyle = window.getComputedStyle;
    window.getComputedStyle = function(element, pseudoElement) {
        var styles = originalGetComputedStyle.call(this, element, pseudoElement);
        
        // Solo interceptar para imágenes con blur
        if (element.tagName === 'IMG' && styles.filter && styles.filter.includes('blur')) {
            return new Proxy(styles, {
                get: function(target, property) {
                    if (property === 'filter' || property === 'webkitFilter') {
                        return 'none';
                    }
                    return target[property];
                }
            });
        }
        
        return styles;
    };
    
    // Inicialización con timing optimizado
    setTimeout(function() {
        console.log('7zap Script: Aplicando mejoras optimizadas...');
        
        // CSS más específico y eficiente
        var style = document.createElement('style');
        style.id = '7zap-enhancements';
        style.textContent = `
            /* Eliminación de blur más específica */
            img[style*="blur"],
            img[class*="c9d225e52d9b4287bc2591ec3fd8a7d06"] {
                filter: none !important;
                -webkit-filter: none !important;
            }
            
            /* Ocultación de alertas premium */
            .alert-scheme,
            [class*="premium-restriction"] {
                display: none !important;
                visibility: hidden !important;
            }
        `;
        
        if (!document.getElementById('7zap-enhancements')) {
            document.head.appendChild(style);
        }
        
        // Procesar elementos existentes
        processBlurredImages();
        hidePremiumElements();
        
    }, 800);
    
    // Observer optimizado con throttling
    var observerTimeout;
    var observer = new MutationObserver(function(mutations) {
        clearTimeout(observerTimeout);
        observerTimeout = setTimeout(function() {
            var shouldProcess = false;
            
            mutations.forEach(function(mutation) {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === 1) {
                        if (node.tagName === 'IMG' || 
                            node.querySelectorAll && node.querySelectorAll('img').length > 0) {
                            shouldProcess = true;
                        }
                    }
                });
            });
            
            if (shouldProcess) {
                processBlurredImages();
                hidePremiumElements();
            }
        }, 100);
    });
    
    observer.observe(document.body, { 
        childList: true, 
        subtree: true 
    });
    
    // Verificación periódica optimizada (menos frecuente)
    setInterval(function() {
        try {
            var hasNewBlurredImages = false;
            var images = document.querySelectorAll('img');
            
            for(var k = 0; k < Math.min(images.length, 10); k++) { // Limitar verificación
                var computedStyle = window.getComputedStyle(images[k]);
                var filter = computedStyle.filter || computedStyle.webkitFilter || '';
                var imgId = images[k].src + '_' + k;
                
                if (filter.includes('blur') && !processedImages.has(imgId)) {
                    hasNewBlurredImages = true;
                    break;
                }
            }
            
            if (hasNewBlurredImages) {
                processBlurredImages();
            }
            
        } catch (e) {
            console.error('7zap Script: Error en verificación periódica:', e);
        }
    }, 8000); // Aumentado a 8 segundos para mejor rendimiento
    
})();

console.log('7zap Script: Configuración optimizada completa');
